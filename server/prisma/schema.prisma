// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  groupId          Int?
  color            String             @default("white")
  avatar           String
  password         String
  token            String
  isAdmin          Boolean            @default(false)
  createdAt        DateTime           @default(now())
  calendars        calendars[]
  job_offers       job_offers[]
  job_applications job_applications[]
  calendar_tokens  calendar_tokens[]
  sync_tokens      sync_tokens[]
  jobs             jobs[]
}

model calendars {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  userId    Int
  user      users    @relation(fields: [userId], references: [id])
  timezone  String
  createdAt DateTime @default(now())
  events    events[]

  @@unique([email, userId])
}

model events {
  id          Int       @id @default(autoincrement())
  calendarId  Int
  eventId     String
  summary     String
  description String
  creator     String
  organizer   String
  start       DateTime
  end         DateTime
  createdAt   DateTime  @default(now())
  calendar    calendars @relation(fields: [calendarId], references: [id])

  @@unique([calendarId, eventId])
}

model sync_tokens {
  id        Int      @id @default(autoincrement())
  name      String
  token     String
  userId    Int
  user      users    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([name, userId])
}

model job_offers {
  id          Int       @id @default(autoincrement())
  userId      Int
  companyName String
  position    String
  salary      String
  jobType     String
  source      String
  interviews  Int
  fileURL     String
  receivedAt  DateTime
  startAt     DateTime?
  createdAt   DateTime  @default(now())
  user        users     @relation(fields: [userId], references: [id])
}

model job_applications {
  id          Int      @id @default(autoincrement())
  userId      Int
  companyName String
  position    String
  createdAt   DateTime @default(now())
  user        users    @relation(fields: [userId], references: [id])
}

model jobs {
  id          Int       @id @default(autoincrement())
  userId      Int
  companyName String
  position    String
  isActive    Boolean   @default(true)
  comments    String?
  startedAt   DateTime?
  createdAt   DateTime  @default(now())
  user        users     @relation(fields: [userId], references: [id])
}

model calendar_tokens {
  id           Int      @id @default(autoincrement())
  accessToken  String   @unique
  refreshToken String   @unique
  type         String   @default("google")
  userId       Int
  isRevoked    Boolean  @default(false)
  createdAt    DateTime @default(now())
  expiresAt    DateTime @default(now())
  user         users    @relation(fields: [userId], references: [id])
}
